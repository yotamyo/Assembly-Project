IDEAL
MODEL small
STACK 100h

DATASEG

main_menu_text_W db 'Press S for help',10,13,'$'
main_menu_text_S db 'Press W to start',10,13,'$'

settings_screen_help1 db 'You are playing a hungry snake',10, 13,'$'
settings_screen_help2 db 'that craves Food.' ,10, 13,'$'
settings_screen_help3 db 'Chase and consume everything that pops',10,13,'$'
settings_screen_help4 db 'up on your screen, but beware!', 10, 13,'$'
settings_screen_help5 db 'use wasd to move around',10,13,'$'
settings_screen_help6 db 'and avoid the walls and your tail.',10, 13,'$'

settings_screen_options1 db 'press C to change colors!',10,13,'$'
settings_screen_options2 db 'press B to go back',10,13,'$'





;Snake Title Card
;Colors db 519 dup (?)

SHeighty db 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21
SWidthx db 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109
SLen dw 118

NHeighty db 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 20, 21, 22, 20, 21, 22, 23, 24, 21, 22, 23, 24, 25, 23, 24, 25, 26, 27, 28, 24, 25, 26, 27, 28, 29, 30, 27, 28, 29, 30, 31, 32, 33, 29, 30, 31, 32, 33, 34, 35, 32, 33, 34, 35, 36, 37, 38, 34, 35, 36, 37, 38, 36, 37, 38, 39, 40, 37, 38, 39, 40, 41, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42
NWidthx db 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134
NLen dw 154

AHeightY db 39, 40, 41, 42, 37, 38, 39, 40, 41, 42, 34, 35, 36, 37, 38, 39, 40, 32, 33, 34, 35, 36, 37, 38, 30, 31, 32, 33, 34, 35, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 23, 24, 25, 26, 27, 28, 29, 21, 22, 23, 24, 25, 26, 27, 19, 20, 21, 22, 23, 24, 19, 20, 21, 22, 23, 24, 21, 22, 23, 24, 25, 26, 27, 28, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 37, 38, 39, 40, 41, 42
AWidthX db 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 152, 153, 154, 155, 156, 152, 153, 154, 155, 156, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 160, 160, 160, 160, 160, 160
ALen dw 125

KHeightY db 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 28, 29, 30, 31, 27, 28, 29, 30, 31, 32, 26, 27, 28, 30, 31, 32, 33, 26, 27, 28, 31, 32, 33, 34, 27, 26, 32, 33, 34, 25, 26, 27, 33, 34, 35, 25, 26, 27, 34, 35, 36, 24, 25, 26, 27, 34, 35, 36, 24, 25, 26, 35, 36, 37, 23, 24, 25, 36, 37, 38, 39, 21, 22, 23, 24, 25, 37, 38, 39, 40
KwidthX db 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182, 182, 183, 183, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 184, 184, 184
KLen dw 116

EHeightY db 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30
EWidthX db 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211
Elen dw 122


settings_screen_colory db 100, 100, 100, 100, 100, 100, 100, 100, 100, 100
settings_screen_colorX db 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 164


gamecolor dw 0
;white = 15, blue = 9, green = 47, cyan = 11, yellow = 44, red = 39
;white/cyan, blue/red, yellow/green
TTcolor dw 11
SNcolor dw 15


;first index is the head
SnakeY dw 122, 126, 130, 134
SnakeX dw 105, 105, 105, 105
SnakeLen dw 4






CODESEG
;-----------------------------------------------------------------------------------------------
;proc PRINTGRAPHIC
proc PRINTGRAPHIC
    color equ [bp + 10]
    len equ [bp + 8]
    Y equ [bp + 6]
    X equ [bp + 4]
    push bp
    mov bp, sp
    push ax
    push cx
    push dx
    xor cx, cx
    xor dx, dx
    xor ax, ax
    mov cx, len


    GraphicLoop:
    push cx
    mov si, cx
    xor cx, cx
    xor dx, dx
    xor ax, ax

    mov bx, X
    mov cl, [bx + si -1]
    xor bx, bx
    mov bx, Y
    mov dl, [bx + si - 1]
    xor bx, bx
    mov bx, color
    mov al, bl
    mov ah, 0ch
    int 10h

    pop cx
    loop graphicloop 
    
    pop dx
    pop cx 
    pop ax
    pop bp 
    ret 8
    endp printgraphic
;-----------------------------------------------------------------------------------------------
proc MAINMENUGRAPHIC
	mov ax, 13h
    int 10h
    ;print S
    push [ttcolor]
    push [slen]
    push offset sheighty
    push offset swidthx
    call printgraphic
    ;print N
    push [ttcolor]
    push [nlen]
    push offset nheighty
    push offset nwidthx
    call printgraphic
    ;print A
    push [ttcolor]
    push [alen]
    push offset aheighty
    push offset awidthx
    call printgraphic
    ;print K
    push [ttcolor]
    push [klen]
    push offset kheighty
    push offset kwidthx
    call printgraphic
    ;print E
    push [ttcolor]
    push [elen]
    push offset eheighty
    push offset ewidthx
    call printgraphic
    ;print MM text
    push 18
    push offset main_menu_text_w
    push offset main_menu_text_s
    call PRINTTEXT_spaces
    call MAINMENUWFK
    ret
    endp mainmenugraphic
;-----------------------------------------------------------------------------------------------
proc Settingsscreenhraphic
    push ax
    mov ax, 13h
    int 10h
    pop ax

    push [sncolor]
    push 10
    push offset settings_screen_colory
    push offset settings_screen_colorx
    call printgraphic
    push offset settings_screen_help1
    push offset settings_screen_help2
    push offset settings_screen_help3
    push offset settings_screen_help4
    push offset settings_screen_help5
    push offset settings_screen_help6
    call printtext_longtext
    push 15
    push offset settings_screen_options1
    push offset settings_screen_options2
    call printtext_spaces
    call settingsmenuwfk
    endp settingsscreenhraphic
    ret
proc PRINTTEXT_longtext
;-----------------------------------------------------------------------------------------------
;this funtcion prints the tutorial on the settings menu. recieves 6 arrays that contain a line of code and prints them one after another
    push bp
    mov bp, sp
    push ax
    push dx

    mov ah, 9h  
    mov dx, [bp+14]
    int 21h
    mov dx, [bp+12]
    int 21h 
    mov dx, [bp+10]
    int 21h
    mov dx, [bp+8]
    int 21h 
    mov dx, [bp+6]
    int 21h 
    mov dx, [bp+4]
    int 21h

    pop dx
    pop ax
    pop bp
    ret 14
    endp printtext_longtext

;-----------------------------------------------------------------------------------------------
proc STARTGAMEGrAPHIC
    mov ax, 13h
	int 10h
    push [ttcolor]
    push 200
    call printgraphicx
    push [ttcolor]
    push 199
    call printgraphicx
    push [ttcolor]
    push 198
    call printgraphicx
    push [ttcolor]
    push 197
    call printgraphicx
    push [ttcolor]
    push 1
    call printgraphicx
    push [ttcolor]
    push 2
    call printgraphicx
    push [ttcolor]
    push 3
    call printgraphicx
    push [ttcolor]
    push 4
    call printgraphicx
; - - - - - - - -- - -
; - - - - - - - -- - -
    push [ttcolor]
    push 320
    call printgraphicy
    push [ttcolor]
    push 319
    call printgraphicy
    push [ttcolor]
    push 318
    call printgraphicy
    push [ttcolor]
    push 317
    call printgraphicy
    push [ttcolor]
    push 1
    call printgraphicy
    push [ttcolor]
    push 2
    call printgraphicy
    push [ttcolor]
    push 3
    call printgraphicy
    push [ttcolor]
    push 4
    call printgraphicy
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;print starting snake
    push cx
    push bx
    mov cx, [snakelen]
    xor bx, bx
printss:
    mov si, cx
    shl si, 1
    push [sncolor]
    xor bx, bx
    mov bx, [snakeY + si - 2]
    push bx
    xor bx, bx
    mov bx, [snakeX + si - 2]
    push bx
    xor bx, bx
    call printsquare
    loop printss
    pop bx
    pop cx
    ret
    endp startgamegraphic
;-----------------------------------------------------------------------------------------------
Proc PRINTTEXT_spaces
;prints tav instructions for users in the main menu. push spaced down amnt and than push W  and than S and than call the function.
    push bp
    mov bp, sp
    push ax
    push cx
    push dx

    xor dx, dx
    xor ax, ax

    mov cx, [bp+8]
position:
    mov dl, 10
    mov ah, 2
    int 21h
    loop position
    

    mov dx, [bp+6]
    mov ah, 9h
    int 21h
    mov dx, [bp+4]
    int 21h 
    
    pop dx
    pop cx
    pop ax
    pop bp
    ret 6
    endp printtext_spaces
;-----------------------------------------------------------------------------------------------
proc MAINMENUWFK
;Waits for users input while main menu is turned on. jmps accordingly
    push ax
    xor ax, ax
    mov ah, 1
    int 21h
    cmp al, 119
    je Start_Game_tag
    cmp al, 115
    je settings_screen_tag
    pop ax
    jmp mainmenu
    endp MAINMENUWFK

;-----------------------------------------------------------------------------------------------
;Train Station! MMWFK
start_game_tag:
    jmp start_game_tag2

settings_screen_tag:
    jmp settings_screen_tag2
;Train station! SMWFK
main_menu_tag:
    jmp mainmenu
;-----------------------------------------------------------------------------------------------
proc SETTINGSMENUWFK
;waits for users input while settings menu is open. jmps accordingly
    push ax
    xor ax, ax
    mov ah, 1
    int 21h
    cmp al, 98
    je main_menu_tag
    cmp al, 99
    je cc 
    pop ax
    jmp settings_screen
cc:
    pop ax
    call changecolors
    endp settingsmenuwfk
;-----------------------------------------------------------------------------------------------
proc CHANGECOLORS
    cmp [gamecolor], 2
    je gamecolorcycle
    inc [gamecolor]
    jmp changer
gamecolorcycle:
    mov [gamecolor], 0

changer:
    cmp [gamecolor], 0
    je C0
    cmp [gamecolor], 1
    je C1
    cmp [gamecolor], 2
    je C2

c0:
    mov [ttcolor], 11
    mov [sncolor], 15
    jmp settings_screen_tag
c1:
    mov [ttcolor], 39
    mov [sncolor], 9
    jmp settings_screen_tag
c2:
    mov [ttcolor], 44
    mov [sncolor], 47
    jmp settings_screen_tag
    endp changecolors

;-----------------------------------------------------------------------------------------------
 proc PRINTGRAPHICX
    push bp
    mov bp, sp
    push ax
    push bx
    push cx
    push dx
    
    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx


    mov cx, 320
printerx:
    X equ si
    Y equ [bp + 4]
    color equ [bp + 6]

    push cx
    mov si, cx

    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx


    mov bx, X
    mov cx, bx
    xor bx, bx
    mov bx, Y
    mov dx, bx
    xor bx, bx
    mov bx, color 
    mov al, bl
    xor bx, bx
    mov ah, 0ch
    int 10h
    pop cx
    loop printerx

    pop dx
    pop cx 
    pop bx
    pop ax
    pop bp 
    ret 4
    endp printgraphicx
;----------------------------------------------------------------------------------------------
 proc PRINTGRAPHICY
    push bp
    mov bp, sp
    push ax
    push bx
    push cx
    push dx
    
    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx


    mov cx, 200
printery:
    X equ [bp + 4]
    Y equ si
    color equ [bp + 6]

    push cx
    mov si, cx

    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx


    mov bx, X
    mov cx, bx
    xor bx, bx
    mov bx, Y
    mov dx, bx
    xor bx, bx
    mov bx, color 
    mov al, bl
    xor bx, bx
    mov ah, 0ch
    int 10h
    pop cx
    loop printery

    pop dx
    pop cx 
    pop bx
    pop ax
    pop bp 
    ret 4
    endp printgraphicy
;----------------------------------------------------------------------------------------------
proc PRINTSQUARE ;prints 4x4 square by the bottom right corner
    IX equ [bp + 4]
    IY equ [bp + 6]
    color equ [bp + 8]

    push bp
    mov bp, sp
    push ax
    push bx
    push cx
    push dx
    push si 

    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx
    xor si, si

    mov cx, 4
Sprinter1:
    push cx
    mov si, cx

    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx
    

    mov bx, IX 
    mov cx, bx
    xor bx, bx
    mov bx, IY 
    add bx, si
    dec bx
    mov dx, bx
    xor bx, bx
    mov bx, color 
    mov al, bl
    xor bx, bx
    mov ah, 0ch
    int 10h
    pop cx
    loop sprinter1

    mov cx, 4
Sprinter2:
    push cx
    mov si, cx

    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx


    mov bx, IX 
    dec bx
    mov cx, bx
    xor bx, bx
    mov bx, IY 
    add bx, si
    dec bx
    mov dx, bx
    xor bx, bx
    mov bx, color 
    mov al, bl
    xor bx, bx
    mov ah, 0ch
    int 10h
    pop cx
    loop sprinter2

    mov cx, 4
Sprinter3:
    push cx
    mov si, cx

    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx


    mov bx, IX 
    dec bx 
    dec bx
    mov cx, bx
    xor bx, bx
    mov bx, IY 
    add bx, si
    dec bx
    mov dx, bx
    xor bx, bx
    mov bx, color 
    mov al, bl
    xor bx, bx
    mov ah, 0ch
    int 10h
    pop cx
    loop sprinter3

    mov cx, 4
Sprinter4:
    push cx
    mov si, cx

    xor ax, ax
    xor bx, bx
    xor cx, cx
    xor dx, dx


    mov bx, IX
    dec bx
    dec bx
    dec bx
    mov cx, bx
    xor bx, bx
    mov bx, IY 
    add bx, si
    dec bx
    mov dx, bx
    xor bx, bx
    mov bx, color 
    mov al, bl
    xor bx, bx
    mov ah, 0ch
    int 10h
    pop cx
    loop sprinter4

    pop si
    pop dx
    pop cx 
    pop bx
    pop ax
    pop bp 
    ret 6
    endp printsquare
;----------------------------------------------------------------------------------------------
proc TAILOFF
    push bx
    push si

    xor bx, bx
    xor si, si

    mov si, [snakelen]
    shl si, 1
    push 0
    mov bx, [snakey + si - 2]
    push bx
    xor bx, bx
    mov bx, [snakex + si - 2]
    push bx
    xor bx, bx
    call printsquare   

    pop si
    pop bx
    ret 
    endp tailoff
;----------------------------------------------------------------------------------------------
proc HEADONUP
    push bx
    push cx
    push si

    xor bx, bx
    xor cx, cx
    xor si, si

    push [sncolor]
    mov bx, [snakey + 0]
    sub bx, 4
    push bx
    xor bx, bx
    mov bx, [snakex + 0]
    push bx
    xor bx, bx
    call printsquare

    pop si
    pop cx
    pop bx
    ret 
    endp headonup
 ;----------------------------------------------------------------------------------------------
proc UPDATESNAKEUP
    push bx
    push cx
    push si

    xor bx, bx
    xor cx, cx
    xor si, si


    mov cx, [snakelen]
    sub cx, 1
USUyloop:
    mov si, cx
    shl si, 1
    mov bx, [snakey + si - 2]
    mov [snakey + si], bx
    xor bx, bx
    loop usuyloop

    sub [snakey + 0], 4


    xor bx, bx
    xor cx, cx
    xor si, si

    mov cx, [snakelen]
    sub cx, 1
USUxloop:
    mov si, cx
    shl si, 1
    mov bx, [snakex + si - 2]
    mov [snakex + si], bx
    xor bx, bx
    loop usuxloop


    pop si
    pop cx
    pop bx
    ret 
    endp updatesnakeup

;----------------------------------------------------------------------------------------------

start:
	mov ax, @data
	mov ds, ax
    xor ax , ax
    xor bx, bx
    xor cx, cx
    xor dx, dx




    mov ax, 13h
	int 10h
    jmp mainmenu


;Train Station! MMWFK
start_game_tag2:
    jmp start_game

settings_screen_tag2:
    jmp settings_screen
;Train station! SMWFK


MainMenu:
    ;load up main menu 
    call mainmenugraphic



settings_screen:
    pop ax ;MMWFK
;turn on settings menu
    call Settingsscreenhraphic





Start_Game:
    pop ax
;MMWFK 


    ;turning on walls and snake
    call startgamegraphic




clock equ 40:6Ch
Move_Up:


    mov cx, 18 ;











Move_Down:
Move_Right:
Move_Left:





























exit:
	mov ax, 4c00h
	int 21h
	
END start
